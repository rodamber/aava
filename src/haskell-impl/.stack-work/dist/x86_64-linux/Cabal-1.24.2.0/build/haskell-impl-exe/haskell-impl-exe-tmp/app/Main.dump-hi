
==================== FINAL INTERFACE ====================
2017-04-29 03:52:31.492421 UTC

interface main@main:Main 8002
  interface hash: 34f6497ed5e0b288489444c886e822dc
  ABI hash: 8a4c04f7c3b898a29f260f12ef0abf82
  export-list hash: b17c9d768b886e7261b049f2ece3e760
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c96f9b696c719379e1cf90d0aa0b2bbe
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.search
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V
                      integer-gmp-1.0.0.1
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:C 9f377b29a39da4b9d45ed9fe67808717
import  -/  haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:Haskell 78765105fa255adf55b6cefa7da7e52e
import  -/  haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:Lib e097b2621f88b47407fdb16c561301bf
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
90c27bda4ab144cb2b4653c2c9779282
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
4ead898ed949bc87233a946b1311559c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ccf343a3537883c5ad7de6d9d418081f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds { (#,#) ipv ipv1 ->
                 case GHC.Base.map
                        @ [GHC.Types.Char]
                        @ Data.Text.Internal.Text
                        Data.Text.pack
                        ipv1 of wild {
                   [] -> Main.$wfail ipv
                   : txt ds1
                   -> case ds1 of wild1 {
                        [] -> Main.$wfail ipv
                        : pat ds2
                        -> case ds2 of wild2 {
                             []
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.showList__2
                                          (Haskell.$w$cshowsPrec1
                                             0#
                                             (Data.Maybe.mapMaybe
                                                @ (GHC.Types.Int, Data.Text.Internal.Text)
                                                @ GHC.Types.Int
                                                (Haskell.matchIndex pat)
                                                (Haskell.indexedTails txt))
                                             Haskell.naive1
                                             Main.main2))
                                       GHC.Types.True
                                       ipv of ds3 { (#,#) ipv2 ipv3 ->
                                GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__2
                                     (case Lib.$wrunSearch
                                             C.naive
                                             txt
                                             pat of ww { Haskell.Output ww1 ww2 ->
                                      Haskell.$w$cshowsPrec1
                                        0#
                                        ww1
                                        ww2
                                        (Main.main_showl
                                           (GHC.Types.:
                                              @ Haskell.Output
                                              (Lib.$wrunSearch C.knuth_morris_pratt txt pat)
                                              (GHC.Types.:
                                                 @ Haskell.Output
                                                 (Lib.$wrunSearch C.boyer_moore txt pat)
                                                 (GHC.Types.[] @ Haskell.Output)))) }))
                                  GHC.Types.True
                                  ipv2 }
                             : ipv2 ipv3 -> Main.$wfail ipv } } } }) -}
49a85ed5cfe5a32807c397fdde25c001
  main2 :: GHC.Base.String
  {- Unfolding: (Main.main_showl1 (GHC.Types.[] @ Haskell.Output)) -}
caa226dc873a2c7193ced6828ec946bd
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3f5fdac3f7e2315858d7623187c5dc4a
  main_showl :: [Haskell.Output] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
d6dab60fbc94fd305695ca4381b2d8e9
  main_showl1 :: [Haskell.Output] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
c777b87c76332ff7f28219cebb440bf6
  search ::
    Lib.StringMatch s =>
    [s] -> Haskell.Txt -> Haskell.Pat -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,C(C1(U))><L,1*U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.search3
                  `cast`
                (forall (s :: <*>_N).
                 <Lib.StringMatch s>_R
                 ->_R <[s]>_R
                 ->_R <Haskell.Txt>_R
                 ->_R <Haskell.Pat>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8d1fa2fdc771dee9ebd8fbe57bec8f3e
  search3 ::
    Lib.StringMatch s =>
    [s]
    -> Haskell.Txt
    -> Haskell.Pat
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,C(C1(U))><L,1*U><L,U><L,U><S,U>,
     Unfolding: (\ @ s
                   ($dStringMatch :: Lib.StringMatch s)
                   (ss :: [s])
                   (txt :: Haskell.Txt)
                   (pat :: Haskell.Pat)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Show.showList__
                      @ Haskell.Output
                      Haskell.$fShowOutput1
                      (GHC.Base.map
                         @ s
                         @ Haskell.Output
                         (\ (s1 :: s) ->
                          $dStringMatch `cast` (Lib.N:StringMatch[0] <s>_N)
                            s1
                            (Haskell.Input txt pat))
                         ss)
                      (GHC.Types.[] @ GHC.Types.Char))
                   GHC.Types.True
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

