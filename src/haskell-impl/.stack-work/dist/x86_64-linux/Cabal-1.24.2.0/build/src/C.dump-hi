
==================== FINAL INTERFACE ====================
2017-04-29 03:34:42.773915 UTC

interface haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:C 8002
  interface hash: 4075e2335b8c16d242042f96774fbdc3
  ABI hash: 9f377b29a39da4b9d45ed9fe67808717
  export-list hash: a3c179b895b74966a09620a80786a539
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fd0f9b35ebc555b74079f2d93b1a955c
  sig of: Nothing
  used TH splices: False
  where
exports:
  C.bad_char_preprocessing
  C.bad_char_shift
  C.boyer_moore
  C.compute_prefix_function
  C.finalizerResult
  C.finalizerVectorChar
  C.finalizerVectorInt
  C.get_comparisons
  C.get_positions
  C.get_positions_size
  C.knuth_morris_pratt
  C.left_right
  C.match_count
  C.naive
  C.ncmp
  C.new_string
  C.reverse_z_algorithm
  C.right_left
  C.strong_good_suffix_preprocessing
  C.strong_good_suffix_shift
  C.z_algorithm
  C.Result
  C.Search
  C.Vector
module dependencies:
package dependencies: base-4.9.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Foreign b4bee334aade4f33021057fdecf4a495
import  -/  base-4.9.1.0:Foreign.C.String b924799565cbc1299cb1e113052a7304
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
addDependentFile "/home/ubuntu/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
716be783d490aa57f6b61059cc717817
  $tcResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   811795081550617662##
                   12906474402458784820##
                   C.$trModule
                   C.$tcResult1) -}
9c54d5e9010cad72fa6b4432ff040682
  $tcResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Result"#) -}
7732dae36014e1d89d230d6d44244a4c
  $tcVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17639800173487829194##
                   3590278333204722197##
                   C.$trModule
                   C.$tcVector1) -}
7aa63314268a08fb8975715fbe347780
  $tcVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vector"#) -}
f15765d9b206ce43bf3d9c305eef7e56
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module C.$trModule2 C.$trModule1) -}
00fe2db0c3ba9675dd2c906439b1e71e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "C"#) -}
c535d236b64dd5a8059d1fe8bc73cc4c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V"#) -}
04448298c90fa8575b146957a9431d61
  data Result
629ad7b64c94eda629c2c630ee32867f
  type Search =
    GHC.Ptr.Ptr (C.Vector GHC.Types.Char)
    -> GHC.Ptr.Ptr (C.Vector GHC.Types.Char)
    -> GHC.Types.IO (GHC.Ptr.Ptr C.Result)
7bd99a57e179b6995ae9059f0138e2f8
  type role Vector phantom
  data Vector a
d05a2e916be996d7d5b43b4e395f41d8
  bad_char_preprocessing ::
    GHC.Ptr.Ptr (C.Vector GHC.Types.Char) -> Foreign.C.Types.CInt
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char)) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V bad_char_preprocessing GHC.Prim.Addr#
                                                                                                      -> GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld
                                                                                                      -> (# GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld,
                                                                                                            GHC.Prim.Int# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Int.I32# (GHC.Prim.narrow32Int# ds4) } })
                  `cast`
                (<GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R Sym (Foreign.C.Types.N:CInt[0])) -}
383a8a985e694542069697d950ab3be8
  bad_char_shift ::
    GHC.Ptr.Ptr Foreign.C.Types.CInt
    -> Foreign.C.Types.CInt -> Foreign.C.Types.CChar
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr Foreign.C.Types.CInt)
                   (ds1 :: GHC.Int.Int32) ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Int.I32# ds5 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V bad_char_shift GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Int#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld,
                                                                                                    GHC.Prim.Int# #)}
                        ds3
                        ds5
                        GHC.Prim.realWorld# of wild { (#,#) ds6 ds7 ->
                 GHC.Int.I8# (GHC.Prim.narrow8Int# ds7) } } })
                  `cast`
                (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                 ->_R Sym (Foreign.C.Types.N:CInt[0])
                 ->_R Sym (Foreign.C.Types.N:CChar[0])) -}
c7cffec2a98a4f4d77eb665004c4e473
  boyer_moore :: C.Search
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
                   (ds1 :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Ptr.Ptr ds5 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V boyer_moore GHC.Prim.Addr#
                                                                                           -> GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Addr# #)}
                        ds3
                        ds5
                        eta of wild { (#,#) ds6 ds7 ->
                 (# ds6, GHC.Ptr.Ptr @ C.Result ds7 #) } } })
                  `cast`
                (<GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R <GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr C.Result>_R)) -}
d9e518322e025b926accac79eb1e8b9a
  compute_prefix_function ::
    GHC.Ptr.Ptr (C.Vector GHC.Types.Char)
    -> GHC.Ptr.Ptr (C.Vector GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char)) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V compute_prefix_function GHC.Prim.Addr#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Addr# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Ptr.Ptr @ (C.Vector GHC.Types.Int) ds4 } }) -}
40323cc008c8873ee47249a09e8efbf1
  finalizerResult ::
    GHC.Ptr.FunPtr (GHC.Ptr.Ptr C.Result -> GHC.Types.IO ())
  {- Strictness: m,
     Unfolding: (GHC.Ptr.FunPtr
                   @ (GHC.Ptr.Ptr C.Result -> GHC.Types.IO ())
                   __label "free_result" (function)) -}
a8ff361ad4cb0ccb94fa6fbd0ca538ee
  finalizerVectorChar ::
    GHC.Ptr.FunPtr
      (GHC.Ptr.Ptr (C.Vector GHC.Types.Char) -> GHC.Types.IO ())
  {- Strictness: m,
     Unfolding: (GHC.Ptr.FunPtr
                   @ (GHC.Ptr.Ptr (C.Vector GHC.Types.Char) -> GHC.Types.IO ())
                   __label "free_vector_char" (function)) -}
d5a7141c93ecb738a78d6a60869d448a
  finalizerVectorInt ::
    GHC.Ptr.FunPtr
      (GHC.Ptr.Ptr (C.Vector GHC.Types.Int) -> GHC.Types.IO ())
  {- Strictness: m,
     Unfolding: (GHC.Ptr.FunPtr
                   @ (GHC.Ptr.Ptr (C.Vector GHC.Types.Int) -> GHC.Types.IO ())
                   __label "free_vector_int" (function)) -}
8a67a466c47020e09d73a4682dbaec60
  get_comparisons :: GHC.Ptr.Ptr C.Result -> Foreign.C.Types.CInt
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr C.Result) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V get_comparisons GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld,
                                                                                                     GHC.Prim.Int# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Int.I32# (GHC.Prim.narrow32Int# ds4) } })
                  `cast`
                (<GHC.Ptr.Ptr C.Result>_R ->_R Sym (Foreign.C.Types.N:CInt[0])) -}
9519c78f57fb3cdf34313778faa4de78
  get_positions ::
    GHC.Ptr.Ptr C.Result
    -> GHC.Types.IO (GHC.Ptr.Ptr Foreign.C.Types.CInt)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr C.Result)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V get_positions GHC.Prim.Addr#
                                                                                             -> GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld
                                                                                             -> (# GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld,
                                                                                                   GHC.Prim.Addr# #)}
                        ds2
                        eta of wild { (#,#) ds3 ds4 ->
                 (# ds3, GHC.Ptr.Ptr @ Foreign.C.Types.CInt ds4 #) } })
                  `cast`
                (<GHC.Ptr.Ptr C.Result>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Ptr.Ptr Foreign.C.Types.CInt>_R)) -}
3da13c4b65e0bc9a99b3c0816c9c60d2
  get_positions_size :: GHC.Ptr.Ptr C.Result -> Foreign.C.Types.CInt
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr C.Result) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V get_positions_size GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Int.I32# (GHC.Prim.narrow32Int# ds4) } })
                  `cast`
                (<GHC.Ptr.Ptr C.Result>_R ->_R Sym (Foreign.C.Types.N:CInt[0])) -}
1799eab0f94f1b7e659c8cd65e810118
  knuth_morris_pratt :: C.Search
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
                   (ds1 :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Ptr.Ptr ds5 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V knuth_morris_pratt GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Addr# #)}
                        ds3
                        ds5
                        eta of wild { (#,#) ds6 ds7 ->
                 (# ds6, GHC.Ptr.Ptr @ C.Result ds7 #) } } })
                  `cast`
                (<GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R <GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr C.Result>_R)) -}
1d6f4ab851f9dba624530793b037c4bc
  left_right :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
d3e850b6166ba3d9be10e091b9f76c84
  match_count ::
    Foreign.C.String.CString
    -> Foreign.C.String.CString -> Foreign.C.Types.CInt
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr Foreign.C.Types.CChar)
                   (ds1 :: GHC.Ptr.Ptr Foreign.C.Types.CChar) ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Ptr.Ptr ds5 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V match_count GHC.Prim.Addr#
                                                                                           -> GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Int# #)}
                        ds3
                        ds5
                        GHC.Prim.realWorld# of wild { (#,#) ds6 ds7 ->
                 GHC.Int.I32# (GHC.Prim.narrow32Int# ds7) } } })
                  `cast`
                (<GHC.Ptr.Ptr Foreign.C.Types.CChar>_R
                 ->_R <GHC.Ptr.Ptr Foreign.C.Types.CChar>_R
                 ->_R Sym (Foreign.C.Types.N:CInt[0])) -}
0fcfb15c3fbd5724818db0221e9a6371
  naive :: C.Search
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
                   (ds1 :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Ptr.Ptr ds5 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V naive GHC.Prim.Addr#
                                                                                     -> GHC.Prim.Addr#
                                                                                     -> GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.Prim.Addr# #)}
                        ds3
                        ds5
                        eta of wild { (#,#) ds6 ds7 ->
                 (# ds6, GHC.Ptr.Ptr @ C.Result ds7 #) } } })
                  `cast`
                (<GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R <GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Ptr.Ptr C.Result>_R)) -}
85fda980f606caa8d3a87af911adfdba
  ncmp ::
    Foreign.C.String.CString
    -> Foreign.C.String.CString
    -> Foreign.C.Types.CInt
    -> Foreign.C.Types.CInt
    -> GHC.Ptr.Ptr C.Result
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (4, False, False)
                (\ (ds :: GHC.Ptr.Ptr Foreign.C.Types.CChar)
                   (ds1 :: GHC.Ptr.Ptr Foreign.C.Types.CChar)
                   (ds2 :: GHC.Int.Int32)
                   (ds3 :: GHC.Int.Int32) ->
                 case ds of ds4 { GHC.Ptr.Ptr ds5 ->
                 case ds1 of ds6 { GHC.Ptr.Ptr ds7 ->
                 case ds2 of ds8 { GHC.Int.I32# ds9 ->
                 case ds3 of ds10 { GHC.Int.I32# ds11 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V ncmp GHC.Prim.Addr#
                                                                                    -> GHC.Prim.Addr#
                                                                                    -> GHC.Prim.Int#
                                                                                    -> GHC.Prim.Int#
                                                                                    -> GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld
                                                                                    -> (# GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld,
                                                                                          GHC.Prim.Addr# #)}
                        ds5
                        ds7
                        ds9
                        ds11
                        GHC.Prim.realWorld# of wild { (#,#) ds12 ds13 ->
                 GHC.Ptr.Ptr @ C.Result ds13 } } } } })
                  `cast`
                (<GHC.Ptr.Ptr Foreign.C.Types.CChar>_R
                 ->_R <GHC.Ptr.Ptr Foreign.C.Types.CChar>_R
                 ->_R Sym (Foreign.C.Types.N:CInt[0])
                 ->_R Sym (Foreign.C.Types.N:CInt[0])
                 ->_R <GHC.Ptr.Ptr C.Result>_R) -}
d1c3f4c9e485561c27947ab1698ac2b0
  new_string ::
    Foreign.C.String.CString
    -> GHC.Types.IO (GHC.Ptr.Ptr (C.Vector GHC.Types.Char))
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr Foreign.C.Types.CChar)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V new_string GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                        ds2
                        eta of wild { (#,#) ds3 ds4 ->
                 (# ds3, GHC.Ptr.Ptr @ (C.Vector GHC.Types.Char) ds4 #) } })
                  `cast`
                (<GHC.Ptr.Ptr Foreign.C.Types.CChar>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Ptr.Ptr (C.Vector GHC.Types.Char)>_R)) -}
e6a8c51bff1f6cf74ef18dcb2f36f525
  reverse_z_algorithm ::
    GHC.Ptr.Ptr (C.Vector GHC.Types.Char)
    -> GHC.Ptr.Ptr (C.Vector GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char)) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V reverse_z_algorithm GHC.Prim.Addr#
                                                                                                   -> GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld
                                                                                                   -> (# GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld,
                                                                                                         GHC.Prim.Addr# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Ptr.Ptr @ (C.Vector GHC.Types.Int) ds4 } }) -}
8eed89ac46b12f8da54d49f6e896d5a4
  right_left :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
8551ea52ec6a5bc91f26c927d35311e2
  strong_good_suffix_preprocessing ::
    GHC.Ptr.Ptr (C.Vector GHC.Types.Char)
    -> GHC.Ptr.Ptr (C.Vector GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char)) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V strong_good_suffix_preprocessing GHC.Prim.Addr#
                                                                                                                -> GHC.Prim.State#
                                                                                                                     GHC.Prim.RealWorld
                                                                                                                -> (# GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld,
                                                                                                                      GHC.Prim.Addr# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Ptr.Ptr @ (C.Vector GHC.Types.Int) ds4 } }) -}
74105b1457991ddbd08acd17225d27a7
  strong_good_suffix_shift ::
    GHC.Ptr.Ptr (GHC.Ptr.Ptr (C.Vector GHC.Types.Int))
    -> Foreign.C.Types.CInt -> GHC.Ptr.Ptr C.Result
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (GHC.Ptr.Ptr (C.Vector GHC.Types.Int)))
                   (ds1 :: GHC.Int.Int32) ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Int.I32# ds5 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V strong_good_suffix_shift GHC.Prim.Addr#
                                                                                                        -> GHC.Prim.Int#
                                                                                                        -> GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                        -> (# GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld,
                                                                                                              GHC.Prim.Addr# #)}
                        ds3
                        ds5
                        GHC.Prim.realWorld# of wild { (#,#) ds6 ds7 ->
                 GHC.Ptr.Ptr @ C.Result ds7 } } })
                  `cast`
                (<GHC.Ptr.Ptr (GHC.Ptr.Ptr (C.Vector GHC.Types.Int))>_R
                 ->_R Sym (Foreign.C.Types.N:CInt[0])
                 ->_R <GHC.Ptr.Ptr C.Result>_R) -}
fd29a9051a7e5bc2363ea33bba1faf28
  z_algorithm ::
    GHC.Ptr.Ptr (C.Vector GHC.Types.Char)
    -> GHC.Ptr.Ptr (C.Vector GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr (C.Vector GHC.Types.Char)) ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V z_algorithm GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Addr# #)}
                        ds2
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 GHC.Ptr.Ptr @ (C.Vector GHC.Types.Int) ds4 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

