
==================== FINAL INTERFACE ====================
2017-04-29 03:55:37.515945 UTC

interface main@main:Main [orphan module] 8002
  interface hash: 881d9828d271c94d0de09ed4adaadf29
  ABI hash: f06b40fb93436828755ee7412fbbebb4
  export-list hash: 89a7b74fcf267b9ef6c2a2591cb6edd0
  orphan hash: 306150333ddf3e6b99b8d2278387365d
  flag hash: 9100a735f391f41bf49cba2e1164f78d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI
                      QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-4HPxin1iv6RAndS8lH3nzo
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V
                      hspec-2.4.3@hspec-2.4.3-HBpqzXYRXJ933IT5Hc0L2H
                      hspec-core-2.4.3@hspec-core-2.4.3-AJmF76CegGE4OD4kmqTEph
                      hspec-expectations-0.8.2@hspec-expectations-0.8.2-DujBeQFEMmfJJRLad7XQgd
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      quickcheck-io-0.1.4@quickcheck-io-0.1.4-C5t3MfRsr5zrFam5nRAFy
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      setenv-0.1.1.3@setenv-0.1.1.3-8dEhk6JWvlmCmVyBammSpu
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         quickcheck-io-0.1.4@quickcheck-io-0.1.4-C5t3MfRsr5zrFam5nRAFy:Test.QuickCheck.IO
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.3@hspec-core-2.4.3-AJmF76CegGE4OD4kmqTEph:Test.Hspec.Core.Example
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck 5d7cb5b36e5406469ab226c41cc67877
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Arbitrary 23d5e13e5df273f2d4aff38bd8911bef
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Gen fa9fa30ba543355933bd6081ce57f80f
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Property 57ffac30066d77d501dc791a65b8da3b
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:C 9f377b29a39da4b9d45ed9fe67808717
import  -/  haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:Haskell 78765105fa255adf55b6cefa7da7e52e
import  -/  haskell-impl-0.1.0.0@haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:Lib e097b2621f88b47407fdb16c561301bf
import  -/  hspec-2.4.3@hspec-2.4.3-HBpqzXYRXJ933IT5Hc0L2H:Test.Hspec 3c7716f891bd2f357ba48c29030d4fef
import  -/  hspec-core-2.4.3@hspec-core-2.4.3-AJmF76CegGE4OD4kmqTEph:Test.Hspec.Core.Runner 6abc61b155b5f7f2d1c281a9b8153374
import  -/  hspec-core-2.4.3@hspec-core-2.4.3-AJmF76CegGE4OD4kmqTEph:Test.Hspec.Core.Spec 03a69d47b5891292740f406be2b8fba8
import  -/  hspec-expectations-0.8.2@hspec-expectations-0.8.2-DujBeQFEMmfJJRLad7XQgd:Test.Hspec.Expectations 7783c70233bb75afab7f7705bd782d86
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 9ba4693a108b74a0b1eb8f7d38f1abee
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal a2f6f66c5bb1247458d9fa25257ab188
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show 638b4149d86790151d6d4eeca215be94
a0e0c5b4ecf5d8221366deaa85139be8
  $fArbitraryInput ::
    Test.QuickCheck.Arbitrary.Arbitrary Haskell.Input
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Haskell.Input
                  Main.$fArbitraryInput_$carbitrary
                  Main.$fArbitraryInput_$s$dmshrink -}
c5566f8c2df17796f6c388e43867cd96
  $fArbitraryInput1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Haskell.Input
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case Main.$w$carbitrary w w1 of ww { (#,#) ww1 ww2 ->
                 Haskell.Input ww1 ww2 }) -}
a31fbb0527f50c4953a55dc358fbd7eb
  $fArbitraryInput10 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'C'#) -}
04f0044329981d0950cb96fd4b84c5d4
  $fArbitraryInput11 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'A'#) -}
cef9cd33163963e99ebbea16e179a6cf
  $fArbitraryInput12 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
ece0afe6552f1511991e8b4f3d6923df
  $fArbitraryInput2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Gen.listOf3
                   @ GHC.Types.Char
                   Main.$fArbitraryInput3) -}
0e7a9674d1fd1cb41ad1978d7c5c035e
  $fArbitraryInput3 :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Main.$fArbitraryInput4) -}
a67d36040c03cb9e406cfacd60993640
  $fArbitraryInput4 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.$fArbitraryInput11
                   Main.$fArbitraryInput5) -}
94daf2aad563dd7cffb06cfd0b8d6a2f
  $fArbitraryInput5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.$fArbitraryInput10
                   Main.$fArbitraryInput6) -}
d9949537ba12e7606921e8d00a2d698d
  $fArbitraryInput6 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.$fArbitraryInput9
                   Main.$fArbitraryInput7) -}
ec2a7809ffb60cc30131340a8782b9d4
  $fArbitraryInput7 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.$fArbitraryInput8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2d8e0955c1208698aa706aec7142b56e
  $fArbitraryInput8 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'G'#) -}
a3a570e16f00e25050437c6353a9486f
  $fArbitraryInput9 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'T'#) -}
92c674f6e2fe592c7efe9717577a88ba
  $fArbitraryInput_$carbitrary ::
    Test.QuickCheck.Gen.Gen Haskell.Input
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryInput1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Haskell.Input>_R)) -}
3d7276f2db76ef87da0f3bf307982e12
  $fArbitraryInput_$s$dmshrink :: Haskell.Input -> [Haskell.Input]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds1 :: Haskell.Input) -> GHC.Types.[] @ Haskell.Input) -}
338700e5deffd93264d06309b482f670
  $fArbitraryText ::
    Test.QuickCheck.Arbitrary.Arbitrary Data.Text.Internal.Text
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  Main.$fArbitraryText_$carbitrary
                  Main.$fArbitraryText_$s$dmshrink -}
fed0103bb670ad474bf39ff3594b6e79
  $fArbitraryText1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Main.$w$carbitrary1 w ww1 }) -}
d8853162ae05f66a8aca45342d5f44db
  $fArbitraryText_$carbitrary ::
    Test.QuickCheck.Gen.Gen Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fArbitraryText1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R)) -}
23c9f8e68fe8e88ec6913b7be90d4fa6
  $fArbitraryText_$s$dmshrink ::
    Data.Text.Internal.Text -> [Data.Text.Internal.Text]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds1 :: Data.Text.Internal.Text) ->
                 GHC.Types.[] @ Data.Text.Internal.Text) -}
3ed0d8955ed44266ced2ca301ff42d07
  $sproperty12 ::
    (GHC.Types.Int -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: GHC.Types.Int -> Test.QuickCheck.Property.Property)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ GHC.Types.Int
                   @ Test.QuickCheck.Property.Property
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestable(->)6
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Test.QuickCheck.Arbitrary.$fArbitraryInt3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitraryInt_$sshrinkIntegral
                   f
                   eta
                   eta1) -}
6dc39f177555cf56ac74511c0ff13e3d
  $sproperty8 ::
    (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Data.Text.Internal.Text
                         -> GHC.Types.Int -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Data.Text.Internal.Text
                   @ (GHC.Types.Int -> GHC.Types.Bool)
                   Data.Text.Show.$fShowText
                   Main.$sproperty9
                     `cast`
                   (Trans
                        (<GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <GHC.Types.Int -> GHC.Types.Bool>_N)))
                   Main.$fArbitraryText1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R))
                   Main.$fArbitraryText_$s$dmshrink
                   f
                   eta
                   eta1) -}
1e8c984bd155dd0e2fe62ff2da12613d
  $sproperty9 ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3, Strictness: <L,C(U)><L,U(U,U,U,U,A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: GHC.Types.Int -> GHC.Types.Bool)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Test.QuickCheck.Arbitrary.$fArbitraryInt3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Test.QuickCheck.Arbitrary.$fArbitraryInt_$sshrinkIntegral
                   f
                   eta
                   eta1) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
02fdaf9867ec308bb28d92641483b6c6
  $w$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (# Haskell.Txt, Haskell.Pat #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (w1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   txt :: [GHC.Types.Char]
                   = case w1 of ww { GHC.Types.I# ww1 ->
                     Test.QuickCheck.Gen.$wlistOf1
                       @ GHC.Types.Char
                       Main.$fArbitraryInput3
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       ww1 }
                 } in
                 (# case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   8#
                                   s1 of ds2 { (#,#) ipv ipv1 ->
                            Main.$wouter1
                              (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                              Main.$fArbitraryInput12
                              txt
                              0#
                              ipv }) of ds2 { (#,#) ipv ipv1 ->
                    ipv1 },
                    case w1 of ww { GHC.Types.I# ww1 ->
                    let {
                      len :: GHC.Types.Int
                      = case GHC.List.$wlenAcc
                               @ GHC.Types.Char
                               txt
                               0# of ww2 { DEFAULT ->
                        GHC.Types.I# ww2 }
                    } in
                    case Test.QuickCheck.Gen.$wsuchThat
                           @ [GHC.Types.Char]
                           Main.$fArbitraryInput2
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                           (\ (p :: [GHC.Types.Char]) ->
                            case GHC.List.$wlenAcc @ GHC.Types.Char p 0# of ww2 { DEFAULT ->
                            case len of wild1 { GHC.Types.I# y ->
                            GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# ww2 y) } })
                           (case ds1 of wild { (,) r1 r2 ->
                            case r2
                                   `cast`
                                 (Test.QuickCheck.Random.N:QCGen[0]) of ww2 { System.Random.TF.Gen.TFGen ww3 ww4 ww5 ww6 ww7 ww8 ->
                            case System.Random.TF.Gen.$wtfGenSplit
                                   ww3
                                   ww4
                                   ww5
                                   ww6 of ww9 { (#,#) ww10 ww11 ->
                            ww10 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                           ww1 of dt { DEFAULT ->
                    case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   8#
                                   s1 of ds2 { (#,#) ipv ipv1 ->
                            Main.$wouter
                              (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                              Main.$fArbitraryInput12
                              dt
                              0#
                              ipv }) of ds2 { (#,#) ipv ipv1 ->
                    ipv1 } } } #)) -}
e0fb96a37131c9f4c01538a0fab2eb55
  $w$carbitrary1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S,U>, Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (ww :: GHC.Prim.Int#) ->
                 case Test.QuickCheck.Gen.$wlistOf
                        @ GHC.Types.Char
                        Test.QuickCheck.Arbitrary.$fArbitraryChar1
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R))
                        w
                        ww of dt { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                8#
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         Main.$wouter2
                           (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                           Main.$fArbitraryInput12
                           dt
                           0#
                           ipv }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
56afed27e52c00983a882a21a00b13f4
  $wf ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Property
  {- Arity: 4, Strictness: <L,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww2 0#) of wild {
                   GHC.Types.False
                   -> let {
                        x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                        = Test.QuickCheck.Property.protectResults
                            (Test.QuickCheck.Property.MkRose
                               @ Test.QuickCheck.Property.Result
                               (case Haskell.$wmatchIndex
                                       ww
                                       ww1
                                       ww2
                                       (w, Data.Text.Internal.Text ww ww1 ww2) of wild1 {
                                  GHC.Base.Nothing -> Test.QuickCheck.Property.counterexample1
                                  GHC.Base.Just ipv -> Test.QuickCheck.Property.succeeded })
                               (GHC.Types.[]
                                  @ (Test.QuickCheck.Property.Rose
                                       Test.QuickCheck.Property.Result)))
                      } in
                      (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                       x1)
                        `cast`
                      (Trans
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (Test.QuickCheck.Property.N:Prop[0])))
                           (Sym (Test.QuickCheck.Property.N:Property[0])))
                   GHC.Types.True
                   -> Test.QuickCheck.Property.$fTestableDiscard2
                        `cast`
                      (Trans
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (Test.QuickCheck.Property.N:Prop[0])))
                           (Sym (Test.QuickCheck.Property.N:Property[0]))) }) -}
57330349964402350c0b56df3e36a71d
  $wf1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                 } in
                 letrec {
                   $wloop_length :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
                     {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#) (ww4 :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww4 end) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# ww ww4 of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# 55296##) of wild2 {
                            GHC.Types.False
                            -> $wloop_length (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#)
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# 56319##) of wild3 {
                                 GHC.Types.False
                                 -> $wloop_length (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#)
                                 GHC.Types.True
                                 -> $wloop_length (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 2#) } } }
                       GHC.Types.True -> ww3 }
                 } in
                 case $wloop_length 0# ww1 of ww3 { DEFAULT ->
                 GHC.Classes.$fEq[]_$s$c==
                   (GHC.Base.map
                      @ (GHC.Types.Int, Data.Text.Internal.Text)
                      @ GHC.Types.Int
                      (Data.Tuple.fst @ GHC.Types.Int @ Data.Text.Internal.Text)
                      (Haskell.indexedTails (Data.Text.Internal.Text ww ww1 ww2)))
                   (GHC.Enum.eftInt 0# (GHC.Prim.-# ww3 1#)) }) -}
5189479c2fd2a506b9433552de1b7332
  $wf2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case GHC.List.$wlenAcc
                        @ (GHC.Types.Int, Data.Text.Internal.Text)
                        (Haskell.indexedTails (Data.Text.Internal.Text ww ww1 ww2))
                        0# of ww3 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 ww3) of wild3 {
                   GHC.Types.False
                   -> let {
                        len :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww2 1#
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># len ww3) of wild4 {
                        GHC.Types.False
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               let {
                                 end :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                               } in
                               letrec {
                                 $wloop_cmp :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Ordering
                                   {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                                 = \ (ww4 :: GHC.Prim.Int#) (ww5 :: GHC.Prim.Int#) ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.>=# ww5 end) of wild1 {
                                     GHC.Types.False
                                     -> case GHC.Prim.indexWord16Array# ww ww5 of r# { DEFAULT ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.geWord# r# 55296##) of wild2 {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.># ww4 ww3) of wild7 {
                                               GHC.Types.False
                                               -> $wloop_cmp
                                                    (GHC.Prim.+# ww4 1#)
                                                    (GHC.Prim.+# ww5 1#)
                                               GHC.Types.True -> GHC.Types.GT }
                                          GHC.Types.True
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.leWord# r# 56319##) of wild7 {
                                               GHC.Types.False
                                               -> case GHC.Prim.tagToEnum#
                                                         @ GHC.Types.Bool
                                                         (GHC.Prim.># ww4 ww3) of wild8 {
                                                    GHC.Types.False
                                                    -> $wloop_cmp
                                                         (GHC.Prim.+# ww4 1#)
                                                         (GHC.Prim.+# ww5 1#)
                                                    GHC.Types.True -> GHC.Types.GT }
                                               GHC.Types.True
                                               -> case GHC.Prim.tagToEnum#
                                                         @ GHC.Types.Bool
                                                         (GHC.Prim.># ww4 ww3) of wild8 {
                                                    GHC.Types.False
                                                    -> $wloop_cmp
                                                         (GHC.Prim.+# ww4 1#)
                                                         (GHC.Prim.+# ww5 2#)
                                                    GHC.Types.True -> GHC.Types.GT } } } }
                                     GHC.Types.True
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<# ww4 ww3) of wild {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.==# ww4 ww3) of wild2 {
                                               GHC.Types.False -> GHC.Types.GT
                                               GHC.Types.True -> GHC.Types.EQ }
                                          GHC.Types.True -> GHC.Types.LT } }
                               } in
                               $wloop_cmp 0# ww1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# len ww3) of wild5 {
                             GHC.Types.False
                             -> case $j GHC.Prim.void# of wild {
                                  DEFAULT -> GHC.Types.False GHC.Types.EQ -> GHC.Types.True }
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# ww2 ww3) of wild6 {
                                  GHC.Types.False
                                  -> case $j GHC.Prim.void# of wild {
                                       DEFAULT -> GHC.Types.False GHC.Types.EQ -> GHC.Types.True }
                                  GHC.Types.True -> GHC.Types.True } }
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True -> GHC.Types.False } }) -}
a22178114454506c132fac24348570e1
  $wouter ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
60e4f7b0c0a73a0955bd598321cf85ab
  $wouter1 ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
b7c893481ee84fb0278e443f68fa71c8
  $wouter2 ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
4bfaede2c5fb1dec58cd9a6177112260
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
781ac18264483d898733b8a8c1f7c834
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main289
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main288
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main287
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main288
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main286
                        GHC.Types.False
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main285
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main284
                        GHC.Types.False
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main280
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case Test.Hspec.Core.Runner.hspec2
                        Test.Hspec.Core.Options.defaultConfig
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case ipv17 of wild { Test.Hspec.Core.Runner.Summary ds ds10 ->
                 case ds10 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.die2 @ () ipv16
                   0# -> (# ipv16, GHC.Tuple.() #) } } } } } } } } } } } }) -}
145a097745cba0584ac9ebdbc1635c11
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "aive"#) -}
df08101dd111c150445c5f1ed65f12b7
  main100 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main40
                   Main.main101) -}
4ccfc1e58b698b85777555e5a29d01e1
  main101 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main102
                   Main.main67) -}
94a5d7360adbffb48494f7f8e9e2a6e3
  main102 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
5675f08fbab9d847279a40b1abad4797
  main103 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
e2ff7ae5c507b4e87628282ed639823b
  main104 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
5dcbe2c59e93aaa66488b7315a312438
  main105 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7698d8a1c84a08a40b417659c161d16d
  main106 ::
    GHC.Base.String
    -> [GHC.Types.Int] -> [GHC.Types.Int] -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [GHC.Types.Int]
                   Main.main107
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]
                   GHC.Show.$fShow[]_$s$fShow[]) -}
06cec19f605e0a9b01a28af820022c2f
  main107 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main108) -}
a8ad65371803d26a80d9cf6393293f6c
  main108 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main109) -}
86470a55a715d1db75a689139f704216
  main109 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main45
                   Main.main110
                   GHC.Stack.Types.EmptyCallStack) -}
e66c085828155a5dd040c3d15c932f04
  main11 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'n'#) -}
e77a18a6aa60511cb76c860bb2dfd0cd
  main110 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main112
                   Main.main40
                   Main.main112
                   Main.main111) -}
60590f540d89d4c9ec3bb5034a231bf5
  main111 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 80#) -}
0746109ae629094709c6bb87566ae575
  main112 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 43#) -}
b1c80fa2b6eb20f1b32802e44718965b
  main113 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main114
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
1bc621fb3faea1b20798282e45f9393b
  main114 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main115) -}
e47067072ae6aff4351606f18cd09a56
  main115 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main116) -}
eac0861bcd1701942ef111448edb0d4c
  main116 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main117) -}
3d0c7bc131c66f95b0e6ceed7c5c8b78
  main117 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main118) -}
3dddf8e89a5bc12109f04420bfe45915
  main118 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main119
                   GHC.Stack.Types.EmptyCallStack) -}
3561bbc53915e305987840d6f15aba71
  main119 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main120
                   Main.main33
                   Main.main120
                   Main.main53) -}
221e5e3f0d2d3c825b07daddf0a49b6c
  main12 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.$fArbitraryInput10
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c5f07d0fd4809c1c5f6b4c56f8147012
  main120 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 42#) -}
13da6315b74eba311ad29f55cad3984b
  main121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main58
                   Main.main122) -}
af972c53c3003d42b433ddee25d9a6b8
  main122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asses test 02"#) -}
a636b765201cb8b81179c74f12c9ef09
  main123 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main124
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
ed552d27827c87f7ad25bf6337246205
  main124 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main125) -}
39997d8929e833d832e8b70edfef6bcf
  main125 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main148
                   Main.main140
                   GHC.Types.False
                   Main.main126
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
4a5bf7eca78aff988a7bccca30fce8c2
  main126 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main127) -}
9155e21f392cefa9dca80b70f7ee8849
  main127 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main134
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main133
                   Main.main128) -}
e0a6b287a73b5c8866f28fc9dc903b03
  main128 :: [GHC.Types.Int]
  {- Unfolding: (Data.Maybe.mapMaybe
                   @ (GHC.Types.Int, Data.Text.Internal.Text)
                   @ GHC.Types.Int
                   Main.main131
                   Main.main129) -}
db417737d7a70ce13954ba54511ed40d
  main129 :: [(GHC.Types.Int, Data.Text.Internal.Text)]
  {- Unfolding: (Haskell.indexedTails Main.main130) -}
becf062210abc8d50249f064e20ccbeb
  main13 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main264
                   Main.main14) -}
3865f233bca1ccb644b3be3ba79d81c0
  main130 :: Haskell.Txt
  {- Unfolding: (Data.Text.Show.unpackCString# "TCGCAGGGCG"#) -}
5225cf689ad38200944e291e72475a76
  main131 ::
    (GHC.Types.Int, Data.Text.Internal.Text)
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1,
     Unfolding: (\ (w1 :: (GHC.Types.Int, Data.Text.Internal.Text)) ->
                 case Main.main132 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Haskell.$wmatchIndex ww1 ww2 ww3 w1 }) -}
8ded3efe3629ab31cf8948e9627bdff8
  main132 :: Haskell.Pat
  {- Unfolding: (Data.Text.Show.unpackCString# "TC"#) -}
a4fcd4dd8d9a8c44bddeb7fb53f8dff0
  main133 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main105
                   (GHC.Types.[] @ GHC.Types.Int)) -}
23d7d64cea1083622ddb7ec30003a453
  main134 ::
    GHC.Base.String
    -> [GHC.Types.Int] -> [GHC.Types.Int] -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [GHC.Types.Int]
                   Main.main135
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]
                   GHC.Show.$fShow[]_$s$fShow[]) -}
6cb0949d3051a7039b50f3c2c5f0992b
  main135 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main136) -}
903edd89ee8e66e1f8545833ee250eaa
  main136 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main137) -}
364749f95d9dabe8b34039642f27c848
  main137 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main45
                   Main.main138
                   GHC.Stack.Types.EmptyCallStack) -}
21e53dd94d004f97602d2a7dd94e714e
  main138 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main139
                   Main.main40
                   Main.main139
                   Main.main39) -}
a16eb217f5902a9a755fb109c652bbe7
  main139 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 41#) -}
81e871a73657cfec966e6774103ef471
  main14 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main210
                   Main.main15) -}
bae42d23715a8d08125c143394de125d
  main140 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main141
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
8fb94acae86c21dc55ee08ed19f6678f
  main141 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main142) -}
bd8d1fe5a364b71ff267556b37e09b30
  main142 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main143) -}
805c50d978ed2e5cdeb62734e1286775
  main143 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main144) -}
043e6fc4458e42e7a5a91cbe4f55f30e
  main144 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main145) -}
99ab395be76085bff98eb5a82574c16d
  main145 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main146
                   GHC.Stack.Types.EmptyCallStack) -}
1aa8253244579d9d24c44d31f594e895
  main146 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main147
                   Main.main33
                   Main.main147
                   Main.main53) -}
4f7e7ddaf2f02ffaf7d9d95257a5451b
  main147 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 40#) -}
9fbcf26de35ce38bf08d7beacba0898c
  main148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main58
                   Main.main149) -}
85b8f4a6b24c5cb38c0179d77b38d995
  main149 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asses test 01"#) -}
9e7a8ea29ab78de05775f42f82257aeb
  main15 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main173
                   Main.main16) -}
95dc14c5a52216bfdb0266a560c0f12a
  main150 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main151
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
0f11f65b1928a15987eb4b83bd2d6871
  main151 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main152) -}
590e5a4352829395071e9b7818b20f2a
  main152 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   Main.main170
                   Main.main161
                   GHC.Types.False
                   Main.main153
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
170f6b44bc0f4dcb2a4552c803100305
  main153 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Main.main154
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])))
                        (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
e0485869cc889765cc8870fb079e16aa
  main154 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Haskell.Input
                   @ (GHC.Types.IO ())
                   Haskell.$fShowInput
                   Test.QuickCheck.IO.propertyIO1
                     `cast`
                   (Trans
                        (<Test.HUnit.Lang.Assertion>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Test.HUnit.Lang.Assertion>_N)))
                   Main.$fArbitraryInput1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Haskell.Input>_R))
                   (\ (ds1 :: Haskell.Input) -> GHC.Types.[] @ Haskell.Input)
                   Main.main_f
                   eta
                   eta1) -}
287cddea7c70c33181745857478bd587
  main155 ::
    GHC.Base.String
    -> [GHC.Types.Int] -> [GHC.Types.Int] -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [GHC.Types.Int]
                   Main.main156
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]
                   GHC.Show.$fShow[]_$s$fShow[]) -}
df46117ddafda26f0209bfac3e5b0410
  main156 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main157) -}
d21c624b961f7a4910ccc65867489661
  main157 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main158) -}
3fb5d7b153fc868523052bf4d2e1e0e4
  main158 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main45
                   Main.main159
                   GHC.Stack.Types.EmptyCallStack) -}
b0b8f436f72eeb5efa54ecfec7a67dd3
  main159 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main160
                   Main.main40
                   Main.main160
                   Main.main139) -}
52b7939bcef173b436bb12159c5cec1e
  main16 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main17
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
812f8b859de237196373a63d40893e74
  main160 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 53#) -}
0f5957ff031c23a07641eaf577539054
  main161 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main162
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
81be8ac7013f1a76b315cffc1ae5b66f
  main162 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main163) -}
ba9417f823901c57ab4055b6e393836a
  main163 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main164) -}
f3bbdb171ba0d7878b6f572a6ab79c14
  main164 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main165) -}
32a2c31ae145b4099bb9422d7b11c1a4
  main165 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main166) -}
eecf3959508e82d19c7f74ae802cefcc
  main166 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main167
                   GHC.Stack.Types.EmptyCallStack) -}
ef55e7545382d74ab7a75063e247d75a
  main167 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main169
                   Main.main33
                   Main.main169
                   Main.main168) -}
00500ca5dbda8f1697bd8f5539fa6dbc
  main168 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 55#) -}
d1237ba19b61ecefa478ad8fd35f1e2c
  main169 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 52#) -}
e44cc1b658d9d9661ed7ac0bb69503f8
  main17 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main9
                   Main.main18) -}
9131a829c1ff606ea806469fa2d7821c
  main170 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main172
                   Main.main171) -}
9229004e708ad300e0ac7773ec559ee2
  main171 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "atches when the text and the pattern are equal"#) -}
0db4801f606d3f979227c57433a0eeaa
  main172 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'm'#) -}
136256aa0913578d329587fc79f01aa9
  main173 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main208
                   Main.main174) -}
e2bb135982e66d289b2ed7e350316cca
  main174 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main192
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R
                   Main.main175
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R) -}
f475f6b35c0afbbbc0c5f6419fc00bc5
  main175 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main176
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
434b4774be47be9ca1c8357a1ce7792a
  main176 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main177) -}
443972c5cbcdabab6f02f56ab291e1bd
  main177 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   Main.main189
                   Main.main180
                   GHC.Types.False
                   Main.main178
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
6c4ce2df192bb217a740500666409af8
  main178 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Main.main179
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])))
                        (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
ffb5f31ad33c14a4239099c6c53062ec
  main179 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
                   Data.Text.Show.$fShowText
                   Main.$sproperty8
                     `cast`
                   (Trans
                        (<Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool>_N)))
                   Main.$fArbitraryText1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R))
                   (\ (ds1 :: Data.Text.Internal.Text) ->
                    GHC.Types.[] @ Data.Text.Internal.Text)
                   Main.main_f1
                   eta
                   eta1) -}
3a120da2cb3b2ebe5a547a3488e3cc5a
  main18 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main150
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R
                   Main.main19) -}
e348b694ec9925cffb5c0a277c76489b
  main180 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main181
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
2e013de5e7926e6425cb30d8527ef54d
  main181 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main182) -}
c58cab38c8382d08bda3146324a5dbe1
  main182 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main183) -}
f63a5656fb030cd5df483927fbf96c9a
  main183 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main184) -}
20c90de268a56ab987423ce11f1f728a
  main184 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main185) -}
69cce8d53bbfbb8a8c809fa31d177e41
  main185 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main186
                   GHC.Stack.Types.EmptyCallStack) -}
4902931b82f0bf38d857e55df911198e
  main186 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main188
                   Main.main40
                   Main.main188
                   Main.main187) -}
f92a0d4e0491293ef5f3ec0574148909
  main187 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 51#) -}
711bcf220aa9b2415bbabf1ba89fda43
  main188 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 72#) -}
5eb3dcee4130168118521ff656160609
  main189 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main191
                   Main.main190) -}
6ab3ac832e63271c5c5f3e598192e60e
  main19 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main123
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main20) -}
0e38709d58677e2068c1ab20758969cf
  main190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "lways returns the int passed in the pair"#) -}
868a27a428705a5e6a74134debf1d07b
  main191 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'a'#) -}
172cf5c20b7c75676bfb20bc93b6f004
  main192 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main193
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
df85702f6f82a8326d2b2c431af7ecc5
  main193 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main194) -}
f7da80a966a48e01354fbe258b1cb644
  main194 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   Main.main205
                   Main.main197
                   GHC.Types.False
                   Main.main195
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
6d81f449c8ff90452d5ce3b15b37c2d3
  main195 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Main.main196
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])))
                        (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
bbc93106ddf48754adac55a1df7d1132
  main196 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Data.Text.Internal.Text
                   @ (GHC.Types.Int -> Test.QuickCheck.Property.Property)
                   Data.Text.Show.$fShowText
                   Main.$sproperty12
                     `cast`
                   (Trans
                        (<GHC.Types.Int -> Test.QuickCheck.Property.Property>_R
                         ->_R Trans
                                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                            (Test.QuickCheck.Property.N:Prop[0])))
                                  (Sym (Test.QuickCheck.Property.N:Property[0])))
                        (Sym (Test.QuickCheck.Property.N:Testable[0]
                                  <GHC.Types.Int -> Test.QuickCheck.Property.Property>_N)))
                   Main.$fArbitraryText1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R))
                   (\ (ds1 :: Data.Text.Internal.Text) ->
                    GHC.Types.[] @ Data.Text.Internal.Text)
                   Main.main_f2
                   eta
                   eta1) -}
436adbdeb0514e161f60ecbe68722341
  main197 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main198
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
4153eccf078e4f5e1a641de2014fe3c5
  main198 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main199) -}
121485210615e96008d40191d25cb2a2
  main199 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main200) -}
db9c6a640411fc5897e041089dbe00ba
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.main279 C.naive s of ds1 { (#,#) ipv ipv1 ->
                 case (Main.main267
                         @ C.Search
                         Lib.runSearch `cast` (Sym (Lib.N:StringMatch[0] <C.Search>_N))
                         C.naive
                         ipv)
                        `cast`
                      ((#,#)
                         <'GHC.Types.VoidRep>_R
                         <'GHC.Types.PtrRepLifted>_R
                         <GHC.Prim.State# GHC.Prim.RealWorld>_R
                         ((,)
                            <()>_R
                            ([(Test.Hspec.Core.Tree.Tree
                                 (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                                  ->_R <GHC.Types.IO ()>_R)
                                 (Test.Hspec.Core.Tree.Item
                                    (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R)_R)_R of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.main279
                        C.knuth_morris_pratt
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Main.main267
                         @ C.Search
                         Lib.runSearch `cast` (Sym (Lib.N:StringMatch[0] <C.Search>_N))
                         C.knuth_morris_pratt
                         ipv4)
                        `cast`
                      ((#,#)
                         <'GHC.Types.VoidRep>_R
                         <'GHC.Types.PtrRepLifted>_R
                         <GHC.Prim.State# GHC.Prim.RealWorld>_R
                         ((,)
                            <()>_R
                            ([(Test.Hspec.Core.Tree.Tree
                                 (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                                  ->_R <GHC.Types.IO ()>_R)
                                 (Test.Hspec.Core.Tree.Item
                                    (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R)_R)_R of ds4 { (#,#) ipv6 ipv7 ->
                 case Main.main279 C.boyer_moore ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case (Main.main267
                         @ C.Search
                         Lib.runSearch `cast` (Sym (Lib.N:StringMatch[0] <C.Search>_N))
                         C.boyer_moore
                         ipv8)
                        `cast`
                      ((#,#)
                         <'GHC.Types.VoidRep>_R
                         <'GHC.Types.PtrRepLifted>_R
                         <GHC.Prim.State# GHC.Prim.RealWorld>_R
                         ((,)
                            <()>_R
                            ([(Test.Hspec.Core.Tree.Tree
                                 (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                                  ->_R <GHC.Types.IO ()>_R)
                                 (Test.Hspec.Core.Tree.Item
                                    (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R)_R)_R of ds6 { (#,#) ipv10 ipv11 ->
                 (# ipv10,
                    (GHC.Tuple.(),
                     GHC.Types.:
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       Main.main13
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.Tree
                               (Test.Hspec.Core.Example.ActionWith ())
                               (Test.Hspec.Core.Tree.Item ()))
                          (Test.Hspec.Core.Tree.Node
                             @ (Test.Hspec.Core.Example.ActionWith ())
                             @ (Test.Hspec.Core.Tree.Item ())
                             Main.main12
                             (GHC.Types.:
                                @ (Test.Hspec.Core.Tree.Tree
                                     (Test.Hspec.Core.Example.ActionWith ())
                                     (Test.Hspec.Core.Tree.Item ()))
                                (Test.Hspec.Core.Tree.Node
                                   @ (Test.Hspec.Core.Example.ActionWith ())
                                   @ (Test.Hspec.Core.Tree.Item ())
                                   Main.main9
                                   (case ipv1 of wild { (,) a1 w2 ->
                                    GHC.Base.++
                                      @ (Test.Hspec.Core.Tree.Tree
                                           (Test.Hspec.Core.Example.ActionWith ())
                                           (Test.Hspec.Core.Tree.Item ()))
                                      w2
                                      (case ipv3 of wild1 { (,) b1 w' -> w' }) }))
                                (GHC.Types.:
                                   @ (Test.Hspec.Core.Tree.Tree
                                        (Test.Hspec.Core.Example.ActionWith ())
                                        (Test.Hspec.Core.Tree.Item ()))
                                   (Test.Hspec.Core.Tree.Node
                                      @ (Test.Hspec.Core.Example.ActionWith ())
                                      @ (Test.Hspec.Core.Tree.Item ())
                                      Main.main6
                                      (case ipv5 of wild { (,) a1 w2 ->
                                       GHC.Base.++
                                         @ (Test.Hspec.Core.Tree.Tree
                                              (Test.Hspec.Core.Example.ActionWith ())
                                              (Test.Hspec.Core.Tree.Item ()))
                                         w2
                                         (case ipv7 of wild1 { (,) b1 w' -> w' }) }))
                                   (GHC.Types.:
                                      @ (Test.Hspec.Core.Tree.Tree
                                           (Test.Hspec.Core.Example.ActionWith ())
                                           (Test.Hspec.Core.Tree.Item ()))
                                      (Test.Hspec.Core.Tree.Node
                                         @ (Test.Hspec.Core.Example.ActionWith ())
                                         @ (Test.Hspec.Core.Tree.Item ())
                                         Main.main3
                                         (case ipv9 of wild { (,) a1 w2 ->
                                          GHC.Base.++
                                            @ (Test.Hspec.Core.Tree.Tree
                                                 (Test.Hspec.Core.Example.ActionWith ())
                                                 (Test.Hspec.Core.Tree.Item ()))
                                            w2
                                            (case ipv11 of wild1 { (,) b1 w' -> w' }) }))
                                      (GHC.Types.[]
                                         @ (Test.Hspec.Core.Tree.Tree
                                              (Test.Hspec.Core.Example.ActionWith ())
                                              (Test.Hspec.Core.Tree.Item ())))))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.Tree
                                  (Test.Hspec.Core.Example.ActionWith ())
                                  (Test.Hspec.Core.Tree.Item ()))))) #) } } } } } }) -}
5f7f939e759aa3c26344a8ddd5c971c9
  main20 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main85
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main21) -}
c56577edf088767cb7d928de0a3136eb
  main200 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main201) -}
4967b07aff0f6b869805e6a30cbca180
  main201 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main202) -}
3edab875645ce31c58a52fa8766d42ed
  main202 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main203
                   GHC.Stack.Types.EmptyCallStack) -}
6ffe41255a3de4f70be77c53b5538ef6
  main203 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main204
                   Main.main40
                   Main.main204
                   Main.main187) -}
59c8ddb8a5642b00994af5bf6a7f851b
  main204 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 69#) -}
006a142f930cdca8e07e25bd548ca1a2
  main205 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main207
                   Main.main206) -}
e8aa8a8fda72601049025d7fab1b6f97
  main206 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "eturns a Just value if the objects match"#) -}
5903af9e8ac9dfd6aa1a19a370e7000c
  main207 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'r'#) -}
7f79fff6c588648eb1b4f944b9633e98
  main208 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main172
                   Main.main209) -}
3b568141d05c8a7da504cc4c6177a112
  main209 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "atchIndex"#) -}
cf9ad50829c79618fda069ef5a78f007
  main21 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main59
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main22
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
5040012424e41fdcb419c16a4809adda
  main210 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main261
                   Main.main211) -}
7990c67cf077d597a9b295afa7dac32a
  main211 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main246
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R
                   Main.main212) -}
7f5a3194275ece7dd3a1abdebb6f7d5a
  main212 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main229
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R
                   Main.main213
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgProperty[0])))_R)_R])_R) -}
64508e03a77fc288c208d0eb50fe8c60
  main213 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main214
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
0667fb95a978bacdcb1cd0d1db067a92
  main214 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main215) -}
da1afbf6098f81785cb8094c035018a7
  main215 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   Main.main227
                   Main.main218
                   GHC.Types.False
                   Main.main216
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
b02ff2b6b3f5d9664ac29a8575c49a75
  main216 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Main.main217
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])))
                        (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
dc78a3c487ae142bfdd4061643b5159f
  main217 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Bool
                   Data.Text.Show.$fShowText
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryText1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R))
                   (\ (ds1 :: Data.Text.Internal.Text) ->
                    GHC.Types.[] @ Data.Text.Internal.Text)
                   Main.main_f3
                   eta
                   eta1) -}
21ae795171c6ac1b079a0fa9ed0c98d7
  main218 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main219
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
cd2f6a17c9604d4ee76beb102b37d48b
  main219 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main220) -}
4426098923f1f0cf404dbdb5bee74c80
  main22 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main23
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
c860c18e9cefa3d62c6836d92afa1b90
  main220 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main221) -}
7af58dc3e45b883fc58d2460c42198c0
  main221 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main222) -}
7d6e5fb3bac0b4a569d3f163a0373862
  main222 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main223) -}
186a08b7c9d0abc04894f2a012f81b47
  main223 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main224
                   GHC.Stack.Types.EmptyCallStack) -}
afe74add6e0940ea3d8bdf8e70e40c0f
  main224 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main226
                   Main.$fArbitraryInput12
                   Main.main226
                   Main.main225) -}
3246d8c681088936adcfc97f8d177ba3
  main225 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 31#) -}
1dce55344c9b2047802408e338e5acb7
  main226 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 64#) -}
fa64254472e9bf0a856bf45245f095f1
  main227 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main58
                   Main.main228) -}
0f0a77877102e6854ea0b37285a399ca
  main228 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "roduces correct tails"#) -}
750c3318cdc5a9bc85e3fb2552e096be
  main229 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main230
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
b91f63db825bf7560fd9d0f9a5676ab7
  main23 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main24) -}
0017efddf0873fb415b7f14d7738d589
  main230 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main231) -}
8dd176c0ea3b53c4d7c6812a166dccbc
  main231 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   Main.main243
                   Main.main234
                   GHC.Types.False
                   Main.main232
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
4be9d815119c5c5400a84cf3ae1a0ff3
  main232 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Main.main233
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])))
                        (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
4e0cb91eaaa15c1274315803787cc0e8
  main233 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Bool
                   Data.Text.Show.$fShowText
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryText1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R))
                   (\ (ds1 :: Data.Text.Internal.Text) ->
                    GHC.Types.[] @ Data.Text.Internal.Text)
                   Main.main_f4
                   eta
                   eta1) -}
d444cc2cb508e49e3c6bef97a7e9a318
  main234 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main235
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
364d5f3f5e1760daa954b2b5fc30b5b5
  main235 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main236) -}
c99a6cca01dcead34b0dca1cf82a6929
  main236 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main237) -}
9440d030c861608fcf8c47474840571d
  main237 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main238) -}
abe9227618f27bf03ac757bb3749f5f1
  main238 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main239) -}
82212db9ef9b27486146a8f3fc2b7a88
  main239 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main240
                   GHC.Stack.Types.EmptyCallStack) -}
6717591c20e9061327dd61bd70cf1cf3
  main24 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main56
                   Main.main46
                   GHC.Types.False
                   Main.main25
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
678b49b6b2fe0d11526b2d6cf789edb8
  main240 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main242
                   Main.$fArbitraryInput12
                   Main.main242
                   Main.main241) -}
162df4ff01484d60b8fd85de9831f66b
  main241 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 27#) -}
76ce02e9ed8a7f3cb8d2059dfe915899
  main242 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 61#) -}
9d8b05c35adefd2f6d05633c656de812
  main243 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main245
                   Main.main244) -}
6539f7552beee46b94dca3000a04b710
  main244 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "as proper indices"#) -}
15444fd20eee99e4622834e86024efb4
  main245 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'h'#) -}
856bce88f2c0cd139d2a82c1b1cd19c0
  main246 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main247
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.QuickCheck.Property.Property)))) -}
bbaf7eef91c92afb7d34514d6e3f964b
  main247 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                   Main.main248) -}
6a455de488aa7cc17898504fca9d015e
  main248 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                   Main.main259
                   Main.main251
                   GHC.Types.False
                   Main.main249
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
4a81519278413705e7e6f9eff96c2439
  main249 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.QuickCheck.Property.Property
                   Test.Hspec.Core.Example.$fExampleProperty1
                     `cast`
                   (Trans
                        (<Test.QuickCheck.Property.Property>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.QuickCheck.Property.Property>_N)))
                   Main.main250
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])))
                        (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
3a63281d4f29b177622e546b59d1db2e
  main25 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main26) -}
76f4a5e7cfc387d574b1542e8beb2168
  main250 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fTestable(->)2
                   @ Data.Text.Internal.Text
                   @ GHC.Types.Bool
                   Data.Text.Show.$fShowText
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryText1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.Text.Internal.Text>_R))
                   (\ (ds1 :: Data.Text.Internal.Text) ->
                    GHC.Types.[] @ Data.Text.Internal.Text)
                   Main.main_f5
                   eta
                   eta1) -}
caa46900714a696f4b7a19afb0bf4480
  main251 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main252
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
576ae62b7cff7f65fe11a8d89c9e8933
  main252 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main253) -}
d00f94d54c80152943c38014e31aeb84
  main253 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main254) -}
e166ba9beece166f0dc28e89e7b6bd5e
  main254 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main255) -}
5832b2f55e12eed1895a5433db24ceba
  main255 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main256) -}
7d203e2c3dfc6aaa5a3ad9858bb67e64
  main256 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main257
                   GHC.Stack.Types.EmptyCallStack) -}
7d7b0dcfa61d3e23d64f42d607314988
  main257 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main258
                   Main.$fArbitraryInput12
                   Main.main258
                   Main.main139) -}
97274646d67c9ebb6363200b7cc04fed
  main258 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 58#) -}
4d0530085d3b53ef4868a77a894ca59a
  main259 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main245
                   Main.main260) -}
9abb9d258ef81648bc25e8313836a34c
  main26 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main34
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main32
                   Main.main27) -}
7c708a09867232ee381f9db2caf74cd2
  main260 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "as the same length as the input"#) -}
4d4ba92b9f51fe12379e79e39d2a71f9
  main261 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main263
                   Main.main262) -}
7b2cf1734f837816dc60802b14cb1973
  main262 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ndexedTails"#) -}
3a6f761f9a38a115f030b28abc73d7c8
  main263 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'i'#) -}
769b17b1b135b07c2430a7457039f92a
  main264 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main266
                   Main.main265) -}
45063962d2b9bf74535a8e3bbb33bb50
  main265 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "askell"#) -}
948811e70107e4c4037fe689f44971c2
  main266 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'H'#) -}
5add7567265d17b52ef756140cee1117
  main267 ::
    Lib.StringMatch a =>
    a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.SpecTree
              (Test.Hspec.Core.Example.Arg
                 Test.QuickCheck.Property.Property)]) #)
  {- Arity: 3, Strictness: <L,C(C1(U(1*U,A)))><L,U><S,U>,
     Unfolding: (\ @ a
                   ($dStringMatch :: Lib.StringMatch a)
                   (cSearch :: a)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2,
                    (GHC.Tuple.(),
                     GHC.Types.:
                       @ (Test.Hspec.Core.Tree.SpecTree
                            (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                       (Test.Hspec.Core.Tree.Leaf
                          @ (Test.Hspec.Core.Example.ActionWith
                               (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                          @ (Test.Hspec.Core.Tree.Item
                               (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property))
                          (Test.Hspec.Core.Tree.Item
                             @ (Test.Hspec.Core.Example.Arg Test.QuickCheck.Property.Property)
                             Main.main277
                             Main.main268
                             GHC.Types.False
                             (Test.Hspec.Core.Example.safeEvaluateExample1
                                @ Test.QuickCheck.Property.Property
                                Test.Hspec.Core.Example.$fExampleProperty1
                                  `cast`
                                (Trans
                                     (<Test.QuickCheck.Property.Property>_R
                                      ->_R <Test.Hspec.Core.Example.Params>_R
                                      ->_R ((Trans
                                                 (Sub (Test.Hspec.Core.Example.D:R:Arg(->)[0]
                                                           <()>_N))
                                                 (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgProperty[0])))
                                             ->_R <GHC.Types.IO ()>_R)
                                            ->_R <GHC.Types.IO ()>_R)
                                      ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Test.Hspec.Core.Example.Result>_R))
                                     (Sym (Test.Hspec.Core.Example.N:Example[0]
                                               <Test.QuickCheck.Property.Property>_N)))
                                (let {
                                   $wf3 :: Haskell.Txt -> Haskell.Pat -> GHC.Types.Bool
                                     {- Arity: 2, Strictness: <L,U(U,U,U)><L,U(U,U,U)>,
                                        Inline: [0] -}
                                   = \ (ww :: Haskell.Txt) (ww1 :: Haskell.Pat) ->
                                     case $dStringMatch `cast` (Lib.N:StringMatch[0] <a>_N)
                                            cSearch
                                            (Haskell.Input
                                               ww
                                               ww1) of wild { Haskell.Output ds1 ds2 ->
                                     GHC.Classes.$fEq[]_$s$c==
                                       ds1
                                       (Data.Maybe.mapMaybe
                                          @ (GHC.Types.Int, Data.Text.Internal.Text)
                                          @ GHC.Types.Int
                                          (Haskell.matchIndex ww1)
                                          (Haskell.indexedTails ww)) }
                                 } in
                                 let {
                                   f :: Haskell.Input -> GHC.Types.Bool
                                     {- Arity: 1, Strictness: <S,U(U(U,U,U),U(U,U,U))>,
                                        Inline: INLINE[0],
                                        Unfolding: InlineRule (1, True, False)
                                                   (\ (w :: Haskell.Input) ->
                                                    case w of ww { Haskell.Input ww1 ww2 ->
                                                    $wf3 ww1 ww2 }) -}
                                   = \ (w :: Haskell.Input) ->
                                     case w of ww { Haskell.Input ww1 ww2 -> $wf3 ww1 ww2 }
                                 } in
                                 (\ (eta :: Test.QuickCheck.Random.QCGen) (eta1 :: GHC.Types.Int) ->
                                  Test.QuickCheck.Property.$fTestable(->)2
                                    @ Haskell.Input
                                    @ GHC.Types.Bool
                                    Haskell.$fShowInput
                                    Test.QuickCheck.Property.$fTestableBool_$cproperty
                                      `cast`
                                    (Sym (Test.QuickCheck.Property.N:Testable[0]
                                              <GHC.Types.Bool>_N))
                                    Main.$fArbitraryInput1
                                      `cast`
                                    (Sym (Test.QuickCheck.Gen.N:Gen[0] <Haskell.Input>_R))
                                    (\ (ds1 :: Haskell.Input) -> GHC.Types.[] @ Haskell.Input)
                                    f
                                    eta
                                    eta1)
                                   `cast`
                                 (Trans
                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                (Test.QuickCheck.Property.N:Prop[0])))
                                      (Sym (Test.QuickCheck.Property.N:Property[0])))))
                               `cast`
                             (<Test.Hspec.Core.Example.Params>_R
                              ->_R <Test.Hspec.Core.Example.ActionWith
                                      (Test.Hspec.Core.Example.Arg
                                         Test.QuickCheck.Property.Property)
                                    -> GHC.Types.IO ()>_R
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.Either.Either
                                               GHC.Exception.SomeException
                                               Test.Hspec.Core.Example.Result>_R))))
                       (GHC.Types.[]
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg
                                  Test.QuickCheck.Property.Property)))) #)) -}
b06624873255881d6dc0e17f6b9ae4eb
  main268 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main269
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (GHC.Stack.Types.srcLocFile loc)
                           (GHC.Stack.Types.srcLocStartLine loc)
                           (GHC.Stack.Types.srcLocStartCol loc)
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
84d18d6ca3aea0b1d9f18b5202ae8dae
  main269 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main270) -}
5ade2f9df87c955e5c7e0fead31ae6ab
  main27 :: [GHC.Types.Int]
  {- Unfolding: (Data.Maybe.mapMaybe
                   @ (GHC.Types.Int, Data.Text.Internal.Text)
                   @ GHC.Types.Int
                   Main.main30
                   Main.main28) -}
3a5e92f87292db884d3e074fafe32971
  main270 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main271) -}
8a1fc387f5c0d87779bfe5f886201711
  main271 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main272) -}
bbe901ab8a393470244be3fc1cbe401b
  main272 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main273) -}
6b300f8d02c2c261fd633ad4c172d28f
  main273 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main274
                   GHC.Stack.Types.EmptyCallStack) -}
13ae9c0fd3307112f55d4323d391b4bf
  main274 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main276
                   Main.main33
                   Main.main276
                   Main.main275) -}
d2b9f28351432d19f3b147c5e37588e2
  main275 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 32#) -}
9ee7466e96419c27f3ddd416fe8ea7f4
  main276 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 37#) -}
b3a95b73d6017250cf3fdaee37556ca1
  main277 :: GHC.Base.String
  {- Unfolding: (case Main.main278 of wild {
                   [] -> Test.Hspec.Core.Tree.specItem1 : ds1 ds2 -> wild }) -}
d04890da24b672059670e4595af0ebaa
  main278 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "matches the haskell spec"#) -}
b285ba4077ebf428568bbcda1273a768
  main279 ::
    C.Search
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 2, Strictness: <L,C(C1(C1(U(U,1*U(U)))))><S,U> -}
f032dcc47ca04ed39934e52169871f29
  main28 :: [(GHC.Types.Int, Data.Text.Internal.Text)]
  {- Unfolding: (Haskell.indexedTails Main.main29) -}
23afa86f889f1ab032eeb6799bf6385a
  main280 :: GHC.Base.String
  {- Unfolding: (Haskell.$w$cshowsPrec1
                   0#
                   Main.main281
                   Haskell.naive1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0b14d4ab17cebc931eb6389a20dfaf73
  main281 :: [GHC.Types.Int]
  {- Unfolding: (Data.Maybe.mapMaybe
                   @ (GHC.Types.Int, Data.Text.Internal.Text)
                   @ GHC.Types.Int
                   Main.main283
                   Main.main282) -}
ea8249df6a755254f5736b558740345b
  main282 :: [(GHC.Types.Int, Data.Text.Internal.Text)]
  {- Unfolding: (Haskell.indexedTails Main.main_txt) -}
f5645ff936c8c7159a28ad108ca6efed
  main283 ::
    (GHC.Types.Int, Data.Text.Internal.Text)
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Unfolding: (Haskell.matchIndex Main.main_txt) -}
42b96f3503b8e158742102f100531d97
  main284 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HS:"#) -}
f57442f4f590984a8f63a0e5f7fd3ecf
  main285 :: GHC.Base.String
  {- Unfolding: (case Lib.$wrunSearch
                        C.boyer_moore
                        Main.main_txt
                        Main.main_txt of ww2 { Haskell.Output ww3 ww4 ->
                 Haskell.$w$cshowsPrec1
                   0#
                   ww3
                   ww4
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
00da47376357e7dc912fcd353566f274
  main286 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "C boyer_moore:"#) -}
fbfbd1ce5a1ffc3adc68849fdcc8a164
  main287 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "C knuth_morris_pratt:"#) -}
a049041fa6e4ae7490bdc38a1a562cec
  main288 :: GHC.Base.String
  {- Unfolding: (case Lib.$wrunSearch
                        C.naive
                        Main.main_txt
                        Main.main_txt of ww2 { Haskell.Output ww3 ww4 ->
                 Haskell.$w$cshowsPrec1
                   0#
                   ww3
                   ww4
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
987577083fc049a64a31cec748dcf342
  main289 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "C naive:"#) -}
bc616789bbd74ef1e0f8e9fc154390d2
  main29 :: Haskell.Txt
  {- Unfolding: (Data.Text.Show.unpackCString# "GCCCAAAGAC"#) -}
ea17476d7e30f4d415ff1d8b984f1f74
  main290 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
2643485dc1bc24022d89be7619fe5028
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main5
                   Main.main4) -}
3cbb436fe57e4f87aca1ae93b9018cef
  main30 ::
    (GHC.Types.Int, Data.Text.Internal.Text)
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1,
     Unfolding: (\ (w1 :: (GHC.Types.Int, Data.Text.Internal.Text)) ->
                 case Main.main31 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Haskell.$wmatchIndex ww1 ww2 ww3 w1 }) -}
609a2a58795abbeadf20f6ec5cdd429f
  main31 :: Haskell.Pat
  {- Unfolding: (Data.Text.Show.unpackCString# "CA"#) -}
86b3aea8b3686e0190fedfac734025ac
  main32 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main33
                   (GHC.Types.[] @ GHC.Types.Int)) -}
71008e228c08143c77876b2ec8b5d99f
  main33 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
d860da20b881dcb33822b7f5e04ada63
  main34 ::
    GHC.Base.String
    -> [GHC.Types.Int] -> [GHC.Types.Int] -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [GHC.Types.Int]
                   Main.main35
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]
                   GHC.Show.$fShow[]_$s$fShow[]) -}
3e1bde92a15e0edc59154e8c454f42e4
  main35 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main36) -}
db8f888f06de010236290d812d810f98
  main36 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main37) -}
5c4ae5a4df4c35f983432615044b1546
  main37 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main45
                   Main.main38
                   GHC.Stack.Types.EmptyCallStack) -}
ee86aa66ce85189658a0903114ad26e1
  main38 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main41
                   Main.main40
                   Main.main41
                   Main.main39) -}
fcd06f543a8bc55ec3d979f47aa3422b
  main39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 65#) -}
820f4315d6a0de35e0e0c5f9276d8062
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "oyer-moore"#) -}
e2e4ade3428eba74f41408163ece4d92
  main40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
9bee0738234751cf6e64cf15c1d21e80
  main41 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 48#) -}
38c93c5b8dc8cdc703771b16f6b69d11
  main42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/Spec.hs"#) -}
176a13424a2ce30fc22927ead2ce760b
  main43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
2406bd9f673ffb736a7cebdde948fd1e
  main44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
b008202bce0e807642f98dee78198385
  main45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldBe"#) -}
35095eaad9e3a8979a04dd44aaae4c8f
  main46 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main47
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
5d4536cc05ddb301c5d014e77ad131d7
  main47 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main48) -}
b25ca2f17255b043424fa6f91b2ac686
  main48 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main49) -}
050acfda05566ea65ccd16a4d5721e1e
  main49 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main50) -}
313a4e16d46f7f80775d161732365ee8
  main5 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'b'#) -}
a72297fabff8dcc0feaf339eac4988fc
  main50 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main51) -}
e1989644845e42b83a36d62194f48dcf
  main51 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main52
                   GHC.Stack.Types.EmptyCallStack) -}
f79038833432b30db3d44db966f47cff
  main52 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main54
                   Main.main33
                   Main.main54
                   Main.main53) -}
9c9fd8b8912e0ba592c9898d261f5e75
  main53 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 22#) -}
244473d3e8e0b87c61be1e849d090781
  main54 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 47#) -}
7aea9ef34acc4030ed2a6d7d956b2cb8
  main55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "it"#) -}
9655245c208b027afa9da39fc19d02f5
  main56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main58
                   Main.main57) -}
7fc6c828f1068304e087e55d019e86a4
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asses test 05"#) -}
f37b9c71669776155eee84de16aa5338
  main58 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'p'#) -}
94740686c5b443b6e768684ce1c073cc
  main59 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main60
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
02ab5d6b25ac545e6c7e4ab47de674f7
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main8
                   Main.main7) -}
3358f295edef07a2a981dc89002d34d1
  main60 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main61) -}
62980f8892528a9bd017c1c26c0ecc18
  main61 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main83
                   Main.main75
                   GHC.Types.False
                   Main.main62
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
ae54221a470822059eeea9e29eb25d87
  main62 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main63) -}
498fef6345396c37e5ed6c43ff25f6f8
  main63 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main69
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main67
                   Main.main64) -}
d4a36653b69a2a6b7b7cee579a61bdaf
  main64 :: [GHC.Types.Int]
  {- Unfolding: (Data.Maybe.mapMaybe
                   @ (GHC.Types.Int, Data.Text.Internal.Text)
                   @ GHC.Types.Int
                   Main.main30
                   Main.main65) -}
61e75eec33e035046f667510fa10830e
  main65 :: [(GHC.Types.Int, Data.Text.Internal.Text)]
  {- Unfolding: (Haskell.indexedTails Main.main66) -}
06d67cd3c3e87ce065f082ddaf2a04bf
  main66 :: Haskell.Txt
  {- Unfolding: (Data.Text.Show.unpackCString# "AGGTACCCAT"#) -}
722f9c8fd0c263e8a5d9e8134e31d9b0
  main67 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main68
                   (GHC.Types.[] @ GHC.Types.Int)) -}
78a5c8c64522ddd843fe19a224c7f7c2
  main68 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
158866e5b7a22a94773a7e845f44b217
  main69 ::
    GHC.Base.String
    -> [GHC.Types.Int] -> [GHC.Types.Int] -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ [GHC.Types.Int]
                   Main.main70
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]
                   GHC.Show.$fShow[]_$s$fShow[]) -}
4ba0844926b668f0ce8db619fe0c2033
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "nuth-morris-pratt"#) -}
e6ca40e255c3840febcd695eff2e80ee
  main70 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.main71) -}
1bbb90dc26cec200c48e892c3830a05a
  main71 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe5
                   Test.Hspec.Expectations.shouldBe1
                   Main.main72) -}
137ec0d11632c304637778c450fb863e
  main72 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main45
                   Main.main73
                   GHC.Stack.Types.EmptyCallStack) -}
82ed0cae1dbf4617f672266f39b7ec64
  main73 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main74
                   Main.main40
                   Main.main74
                   Main.main39) -}
9cedc18eeb0c0d7d03391facf715ea74
  main74 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
4cf856ccd914be79f55231ad8310336b
  main75 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (case GHC.List.reverse1
                        @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)
                        Main.main76
                        (GHC.Types.[]
                           @ (GHC.Base.String, GHC.Stack.Types.SrcLoc)) of wild {
                   [] -> GHC.Base.Nothing @ Test.Hspec.Core.Example.Location
                   : ds ds1
                   -> case ds of wild2 { (,) ds2 loc ->
                      GHC.Base.Just
                        @ Test.Hspec.Core.Example.Location
                        (Test.Hspec.Core.Example.Location
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds3 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds6 })
                           (case loc of wild1 { GHC.Stack.Types.SrcLoc ds4 ds5 ds3 ds6 ds7 ds8 ds9 ->
                            ds7 })
                           Test.Hspec.Core.Example.ExactLocation) } }) -}
74c7a6cf645b03112cc5b4f5b0e5b845
  main76 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (Data.CallStack.$wunsafeDrop
                   @ ([GHC.Types.Char], GHC.Stack.Types.SrcLoc)
                   1#
                   Main.main77) -}
3c0e2df5246b3e8973cb8f0d454f8366
  main77 :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
  {- Unfolding: (GHC.Stack.Types.getCallStack Main.main78) -}
080ce9240e99ad41f6201b4a4e6b2c07
  main78 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem9
                   Test.Hspec.Core.Tree.specItem2
                   Main.main79) -}
99558895d48a2a7e7f13f0d5907a3f1a
  main79 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main80) -}
06d5a6814f8ae31279a2f13ee0c88982
  main8 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'k'#) -}
356fbcc04b3c565d10cfb965dc2671bc
  main80 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main55
                   Main.main81
                   GHC.Stack.Types.EmptyCallStack) -}
39434127fd5dd34766954b812deaf621
  main81 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main44
                   Main.main43
                   Main.main42
                   Main.main82
                   Main.main33
                   Main.main82
                   Main.main53) -}
85412bfa520f972e47790d8004b5cf5e
  main82 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 44#) -}
2471c7223a6c274423335bb5f79d1e6e
  main83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main58
                   Main.main84) -}
a12ee365b6e00e64bafea896238aa13b
  main84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asses test 03"#) -}
91e7f5e397de55e3166f00478cf4fe08
  main85 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main86
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
12fd05560083f159cff6d1001e1afcc1
  main86 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main87) -}
c942c2d2913c1c399b99d0ccd229b275
  main87 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main121
                   Main.main113
                   GHC.Types.False
                   Main.main88
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
2793b710d91b668c01f39007206dbd14
  main88 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R ((Trans
                                    (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                    (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                ->_R <GHC.Types.IO ()>_R)
                               ->_R <GHC.Types.IO ()>_R)
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main89) -}
e6990a8f65c4ee988379cb1b81062c7b
  main89 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.main106
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main95
                   Main.main90) -}
45be6564ae81e106d3d529246b3d6fb4
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main11
                   Main.main10) -}
0cf2de2eb1cc3c964b2dfa2d0c8a4fc9
  main90 :: [GHC.Types.Int]
  {- Unfolding: (Data.Maybe.mapMaybe
                   @ (GHC.Types.Int, Data.Text.Internal.Text)
                   @ GHC.Types.Int
                   Main.main93
                   Main.main91) -}
332336d30f679b6d22c8574b74cbdb37
  main91 :: [(GHC.Types.Int, Data.Text.Internal.Text)]
  {- Unfolding: (Haskell.indexedTails Main.main92) -}
0fec7a42c90d49ac5394f11cc1374e15
  main92 :: Haskell.Txt
  {- Unfolding: (Data.Text.Show.unpackCString# "AAAAAAAAAA"#) -}
6a7770b6e98c07d2b249d5a169525b45
  main93 ::
    (GHC.Types.Int, Data.Text.Internal.Text)
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1,
     Unfolding: (\ (w1 :: (GHC.Types.Int, Data.Text.Internal.Text)) ->
                 case Main.main94 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Haskell.$wmatchIndex ww1 ww2 ww3 w1 }) -}
fd1227df41d054ccb9622c184a3cb91f
  main94 :: Haskell.Pat
  {- Unfolding: (Data.Text.Show.unpackCString# "AAA"#) -}
5d237b8f9e77e5161feaaf8691e85ff3
  main95 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main105
                   Main.main96) -}
215345aaecfc9495480daeb52c2a10fb
  main96 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main104
                   Main.main97) -}
3130dfedd8ee1199c4c68df1b4c06c3e
  main97 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main103
                   Main.main98) -}
ab97c6c6f39c9595c6afef858fedf74e
  main98 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.main33 Main.main99) -}
5ad3de335de5321e3318655560362ea3
  main99 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.$fArbitraryInput12
                   Main.main100) -}
82c6b812707a1fb9e9b04abfd8f8e439
  main_f :: Haskell.Input -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,1*U(1*U(U,U,U),U(U,U,U))>,
     Unfolding: (\ (x :: Haskell.Input) ->
                 Main.main155
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main133
                   (case x of ww { Haskell.Input ww1 ww2 ->
                    Data.Maybe.mapMaybe
                      @ (GHC.Types.Int, Data.Text.Internal.Text)
                      @ GHC.Types.Int
                      (Haskell.matchIndex ww2)
                      (Haskell.indexedTails ww1) })) -}
d288f2d967d01da894d6e4b625a8a38c
  main_f1 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S(SSS),1*U(U,U,U)><L,1*U(U,U,U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Haskell.$wmatchIndex ww1 ww2 ww3 (w2, w1) of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just ix' -> GHC.Classes.eqInt w2 ix' } }) -}
5567360578fc402bbbf3bb14c6a085e2
  main_f2 ::
    Data.Text.Internal.Text
    -> GHC.Types.Int -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <S(LLS),1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Text.Internal.Text) (w1 :: GHC.Types.Int) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wf ww1 ww2 ww3 w1 }) -}
7056a62a2e61cdb59f6bbb2a24a23170
  main_f3 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(U,U,U)>,
     Unfolding: (\ (x :: Data.Text.Internal.Text) ->
                 case Main.main_tailsGo
                        (case x of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                         let {
                           end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                         } in
                         letrec {
                           $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                           = \ (ww :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# ww end) of wild1 {
                               GHC.Types.False
                               -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                  case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.geWord# r# 55296##) of wild2 {
                                    GHC.Types.False
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                         ($wunfold (GHC.Prim.+# ww 1#))
                                    GHC.Types.True
                                    -> case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.leWord# r# 56319##) of wild3 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                              ($wunfold (GHC.Prim.+# ww 1#))
                                         GHC.Types.True
                                         -> case GHC.Prim.indexWord16Array#
                                                   dt
                                                   (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                            GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C#
                                                 (GHC.Prim.chr#
                                                    (GHC.Prim.+#
                                                       (GHC.Prim.+#
                                                          (GHC.Prim.uncheckedIShiftL#
                                                             (GHC.Prim.-#
                                                                (GHC.Prim.word2Int# r#)
                                                                55296#)
                                                             10#)
                                                          (GHC.Prim.-#
                                                             (GHC.Prim.word2Int# r#1)
                                                             56320#))
                                                       65536#)))
                                              ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                               GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                         } in
                         $wunfold dt1 }) of wild {
                   [] -> case GHC.List.init2 ret_ty GHC.Types.Bool of {}
                   : x1 xs
                   -> GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        (GHC.Base.map
                           @ (GHC.Types.Int, Data.Text.Internal.Text)
                           @ Data.Text.Internal.Text
                           (Data.Tuple.snd @ GHC.Types.Int @ Data.Text.Internal.Text)
                           (Haskell.indexedTails x))
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ Data.Text.Internal.Text
                           Data.Text.pack
                           (GHC.List.init1 @ [GHC.Types.Char] x1 xs)) }) -}
beb37293e398089c1ba272c1a8884305
  main_f4 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LSS),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wf1 ww1 ww2 ww3 }) -}
9f0e3ec11ac76fd51bbbc7917f4f2a46
  main_f5 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LLS),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wf2 ww1 ww2 ww3 }) -}
ff3a7461c10346538aedcae3fc8ec80b
  main_tailsGo :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
4e090db0ad73226be993d5f647d8c93d
  main_txt :: Haskell.Txt
  {- Unfolding: (Data.Text.Show.unpackCString# "C"#) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Haskell.Input]
  = Main.$fArbitraryInput
instance Test.QuickCheck.Arbitrary.Arbitrary [Data.Text.Internal.Text]
  = Main.$fArbitraryText
"SPEC/Main $dmshrink @ Input" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                Haskell.Input)
  Test.QuickCheck.Arbitrary.$dmshrink @ Haskell.Input $dArbitrary
  = Main.$fArbitraryInput_$s$dmshrink
"SPEC/Main $dmshrink @ Text" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               Data.Text.Internal.Text)
  Test.QuickCheck.Arbitrary.$dmshrink @ Data.Text.Internal.Text
                                      $dArbitrary
  = Main.$fArbitraryText_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

