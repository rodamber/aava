
==================== FINAL INTERFACE ====================
2017-04-29 00:37:45.487086 UTC

interface haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V:Lib 8002
  interface hash: 73395ccf59b64d5a1986405757c40f53
  ABI hash: bffb5ecf14660363d3f67ff38b8a37b6
  export-list hash: 72fbd3f4d84d87079f8f4101b4d5d373
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 727e0adebc9748dc8e424166443818c0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.addPosition
  Lib.count
  Lib.mkOutput
  Lib.runSearch
  Lib.Output{Lib.Output comparisons positions}
  Lib.Pat
  Lib.Search
  Lib.Txt
module dependencies: C
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Foreign b4bee334aade4f33021057fdecf4a495
import  -/  base-4.9.1.0:Foreign.C.String b924799565cbc1299cb1e113052a7304
import  -/  base-4.9.1.0:Foreign.C.Types 7e2925cabce0cf30b38675d2c934e1ae
import  -/  base-4.9.1.0:Foreign.ForeignPtr.Imp 983e41bceaf3a479584f5f15468ec17c
import  -/  base-4.9.1.0:Foreign.Marshal.Array 63114b8be90ae825866d45b38d8798ce
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  C 9f377b29a39da4b9d45ed9fe67808717
  exports: a3c179b895b74966a09620a80786a539
  Result 04448298c90fa8575b146957a9431d61
  Search 629ad7b64c94eda629c2c630ee32867f
  finalizerResult 40323cc008c8873ee47249a09e8efbf1
  finalizerVectorChar a8ff361ad4cb0ccb94fa6fbd0ca538ee
  get_comparisons 8a67a466c47020e09d73a4682dbaec60
  get_positions 9519c78f57fb3cdf34313778faa4de78
  get_positions_size 3da13c4b65e0bc9a99b3c0816c9c60d2
  new_string d1c3f4c9e485561c27947ab1698ac2b0
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 02cbbc20bdd508fabc38de38896bbae0
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal a2f6f66c5bb1247458d9fa25257ab188
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show 638b4149d86790151d6d4eeca215be94
7dacc536cc85edb4dc21ec4c2d409c2d
  $fEqOutput :: GHC.Classes.Eq Lib.Output
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Output Lib.$fEqOutput_$c== Lib.$fEqOutput_$c/= -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fEqOutput_$c/= :: Lib.Output -> Lib.Output -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Output) (w1 :: Lib.Output) ->
                 case w of ww { Lib.Output ww1 ww2 ->
                 case w1 of ww3 { Lib.Output ww4 ww5 ->
                 Lib.$w$c/= ww1 ww2 ww4 ww5 } }) -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fEqOutput_$c== :: Lib.Output -> Lib.Output -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Output) (w1 :: Lib.Output) ->
                 case w of ww { Lib.Output ww1 ww2 ->
                 case w1 of ww3 { Lib.Output ww4 ww5 ->
                 Lib.$w$c== ww1 ww2 ww4 ww5 } }) -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fShowOutput :: GHC.Show.Show Lib.Output
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Output
                  Lib.$fShowOutput_$cshowsPrec
                  Lib.$fShowOutput_$cshow
                  Lib.$fShowOutput_$cshowList -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fShowOutput1 :: Lib.Output -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Output) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Output ww1 ww2 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
093b8d14f134c4c85af93a2f4580673e
  $fShowOutput2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
0b99e92ca0a8a0983ac84e9dd6df57e6
  $fShowOutput3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "comparisons = "#) -}
f668a340a8430d98075c343be6debb5a
  $fShowOutput4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
3198464d8c256c13cb2a2cf7353a92b0
  $fShowOutput5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "positions = "#) -}
636eb571ab36b4178aa6b1ee372c38df
  $fShowOutput6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Output {"#) -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fShowOutput_$cshow :: Lib.Output -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Output) ->
                 Lib.$fShowOutput_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fShowOutput_$cshowList :: [Lib.Output] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Output Lib.$fShowOutput1) -}
7dacc536cc85edb4dc21ec4c2d409c2d
  $fShowOutput_$cshowsPrec ::
    GHC.Types.Int -> Lib.Output -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Output)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Output ww3 ww4 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
c725603e75a40e0eb1ae3307bb6fc6d5
  $tc'Output :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13387717841467252382##
                   2790784213114598737##
                   Lib.$trModule
                   Lib.$tc'Output1) -}
647de0ab4011a256030489c21f3fdc40
  $tc'Output1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Output"#) -}
0df6cc80c8fbdfddfea03d3718d5370e
  $tcOutput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14902923111023974931##
                   14471823962830140454##
                   Lib.$trModule
                   Lib.$tcOutput1) -}
695b2ee3f9195cb77c8d6275865e405b
  $tcOutput1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Output"#) -}
97a46265ce65a8a21174957449df937f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
7418b682606096e53cda2edde70c11c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
8072fa0d604396bb89f726266a6b51d1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V"#) -}
828ce108160556c21c61de339dfa62e8
  $w$c/= ::
    [GHC.Types.Int]
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Int])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: [GHC.Types.Int])
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Classes.$fEq[]_$s$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
f638d095c6a6b46f8d2ae57bb1797a47
  $w$c== ::
    [GHC.Types.Int]
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Int])
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: [GHC.Types.Int])
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Classes.$fEq[]_$s$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqInt ww1 ww3 }) -}
ba4ab8288b5a9310d8d9f0ba3e4c9019
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [GHC.Types.Int])
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowOutput6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowOutput5
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 Lib.$fShowOutput4
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    Lib.$fShowOutput3
                                    (case ww2 of ww3 { GHC.Types.I# ww4 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww4
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Lib.$fShowOutput2
                                               x) of ww5 { (#,#) ww6 ww7 ->
                                     GHC.Types.: @ GHC.Types.Char ww6 ww7 } }))
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww3 { GHC.Types.I# ww4 ->
                                   case GHC.Show.$wshowSignedInt
                                          0#
                                          ww4
                                          (let {
                                             lvl27 :: [GHC.Types.Char]
                                             = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                           } in
                                           letrec {
                                             showl :: [GHC.Types.Int] -> GHC.Base.String
                                               {- Arity: 1, Strictness: <S,1*U> -}
                                             = \ (ds2 :: [GHC.Types.Int]) ->
                                               case ds2 of wild1 {
                                                 [] -> lvl27
                                                 : y ys
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      GHC.Show.shows5
                                                      (case y of ww5 { GHC.Types.I# ww6 ->
                                                       case GHC.Show.$wshowSignedInt
                                                              0#
                                                              ww6
                                                              (showl ys) of ww7 { (#,#) ww8 ww9 ->
                                                       GHC.Types.: @ GHC.Types.Char ww8 ww9 } }) }
                                           } in
                                           showl xs) of ww5 { (#,#) ww6 ww7 ->
                                   GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
dcecfff7ef24b879131dd9f31f41f5e7
  $wmkOutput ::
    GHC.Ptr.Ptr C.Result -> (# [GHC.Types.Int], GHC.Types.Int #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Ptr.Ptr C.Result) ->
                 (# case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ [Foreign.C.Types.CInt]
                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                            case w of ds1 { GHC.Ptr.Ptr ds2 ->
                            case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V get_positions GHC.Prim.Addr#
                                                                                                        -> GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                        -> (# GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld,
                                                                                                              GHC.Prim.Addr# #)}
                                   ds2
                                   s' of wild { (#,#) ds3 ds4 ->
                            case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V get_positions_size GHC.Prim.Addr#
                                                                                                             -> GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld
                                                                                                             -> (# GHC.Prim.State#
                                                                                                                     GHC.Prim.RealWorld,
                                                                                                                   GHC.Prim.Int# #)}
                                   ds2
                                   GHC.Prim.realWorld# of wild1 { (#,#) ds7 ds8 ->
                            Foreign.Marshal.Array.$wpeekArray
                              @ Foreign.C.Types.CInt
                              Foreign.C.Types.$fStorableCInt
                              (GHC.Prim.narrow32Int# ds8)
                              (GHC.Ptr.Ptr @ Foreign.C.Types.CInt ds4)
                              ds3 } } } }) of ds { (#,#) ipv ipv1 ->
                    GHC.Base.map
                      @ Foreign.C.Types.CInt
                      @ GHC.Types.Int
                      Lib.mkOutput1
                      ipv1 },
                    case w of ds1 { GHC.Ptr.Ptr ds2 ->
                    case {__pkg_ccall haskell-impl-0.1.0.0-5QZQUPOQJel4VPmddVin6V get_comparisons GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                           ds2
                           GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                    GHC.Types.I# (GHC.Prim.narrow32Int# ds4) } } #)) -}
7dacc536cc85edb4dc21ec4c2d409c2d
  data Output
    = Output {positions :: [GHC.Types.Int],
              comparisons :: GHC.Types.Int}
1dfa11f06ec168ac51b4531045ce4311
  type Pat = Lib.Txt
d249badd1506d0a7bbc5c2f83e54bdd4
  type Search = Lib.Txt -> Lib.Pat -> Lib.Output
273659930785860e98571c2788ce7757
  type Txt = Data.Text.Internal.Text
604d2a92c46fdf5185a02ae40b295eb7
  addPosition :: Lib.Output -> GHC.Types.Int -> Lib.Output
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Lib.Output) (p :: GHC.Types.Int) ->
                 case ds of wild { Lib.Output ps c ->
                 Lib.Output (GHC.Types.: @ GHC.Types.Int p ps) c }) -}
1210d268c9ddc8e2941eefb2abefeb23
  comparisons :: Lib.Output -> GHC.Types.Int
  RecSel Left Lib.Output
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Output) ->
                 case ds of wild { Lib.Output ds1 ds2 -> ds2 }) -}
7eb9894ce82ff8ec38a3bfd51cd0ffc9
  count :: Lib.Output -> Lib.Output
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Output) ->
                 case ds of wild { Lib.Output ps c ->
                 Lib.Output
                   ps
                   (case c of wild1 { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# x 1#) }) }) -}
d4d08f1534cce3193321c87ee3e1fc2e
  mkOutput :: GHC.Ptr.Ptr C.Result -> Lib.Output
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Ptr.Ptr C.Result) ->
                 case Lib.$wmkOutput w of ww { (#,#) ww1 ww2 ->
                 Lib.Output ww1 ww2 }) -}
cee93aebd6d47d48088d0356ec95de57
  mkOutput1 :: Foreign.C.Types.CInt -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Foreign.C.Types.CInt) ->
                 case ds
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of wild { GHC.Int.I32# x# ->
                 GHC.Types.I# x# }) -}
46a657697f91b9574831b58a2022e732
  positions :: Lib.Output -> [GHC.Types.Int]
  RecSel Left Lib.Output
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Output) ->
                 case ds of wild { Lib.Output ds1 ds2 -> ds1 }) -}
ede31e9c8dab5d290dfe9ae9af74e2f1
  runSearch :: C.Search -> Lib.Search
  {- Arity: 3,
     Strictness: <L,1*C1(C1(C1(U(U,1*U(U)))))><L,1*U(U,U,U)><L,1*U(U,U,U)> -}
instance GHC.Classes.Eq [Lib.Output] = Lib.$fEqOutput
instance GHC.Show.Show [Lib.Output] = Lib.$fShowOutput
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

